/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.riege.onerecord.carbulator;

import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.DatatypeConfigurationException;

import org.iata.onerecord.cargo.model.BookingOption;
import org.iata.onerecord.cargo.model.Piece;
import org.iata.onerecord.cargo.model.TransportMovement;

import CarbonCare.CarbonCareRequestApi;
import CarbonCare.CarbonCareResponseApi;
import CarbonCare.CarbonCareResponseApi.Response.Shipments.Shipment;
import CarbonCare.CarbonCareResponseApi.Response.Shipments.Shipment.CompensationCosts;
import CarbonCare.CarbonCareResponseApi.Response.Shipments.Shipment.Emmissions;

public class CarbulatorEngine {

    // set this to 0 for no-delays and 1 for demo-delays
    private static double speedFactor = 0.0d;
    
    public static void main(String[] args)
        throws IOException, DatatypeConfigurationException, JAXBException, CertificateException,
        NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        Locale.setDefault(new Locale("eng", "IR"));
        // speedFactor = 0.1d;
        speedFactor = 0.7d;
        System.err.println("**********************************");
        System.err.println("*** Starting Carbulator Engine ***");
        System.err.println("**********************************");
        wait(2000);
        System.err.println("Parsing commandline and properties");
        CommandLine cmdOptions = new CommandLine(args);
        wait(2000);
        new CarbulatorEngine(cmdOptions).carbonate();
    }

    private CommandLine cmdOptions;

    public CarbulatorEngine() {
        this(new CommandLine(new String[0]));
    }

    public CarbulatorEngine(CommandLine cmdOptions) {
        this.cmdOptions = cmdOptions;
    }

    private final String ROTATING_CHAR = "/-\\|";

    public void carbonate()
        throws IOException, DatatypeConfigurationException, KeyManagementException,
        NoSuchAlgorithmException, CertificateException, KeyStoreException, JAXBException
    {
        String outputSource = cmdOptions.getOutputFile();

        System.err.println("Output location: " + outputSource);
        System.err.printf("CarbonCare API key found: %s...\n",
            cmdOptions.getApiKey().substring(0, 10));

        wait(2000);
        System.err.println(
            String.format("Found %d BookingOptions", cmdOptions.getInputSources().length));
        wait(2000);
        List<BookingOption> allBO = new ArrayList<>();
        int counter = 0;
        for (String inputSource : cmdOptions.getInputSources()) {
            counter++;
            System.err.printf("Reading    #%02d: 1R MCD BookingOptions from %s\n", counter,
                inputSource);
            InputStream is = ClassLoader.getSystemResourceAsStream(inputSource);
            BookingOption bo = OneRecordDomainUtil.readJsonBookingOption(is);
            System.err.printf("                ID: %s\n", bo.getId());
            allBO.add(bo);
            wait(700);

            String shortInfo = bookingOptionFlightsToString(bo);
            System.err.println(String.format("Connection #%02d: %s", counter, shortInfo));
            wait(700);

            System.err.println(
                String.format("Retrieving #%02d: CO2 emmission via API call to CarbonCare.. ",
                    counter));
            for (int i = 0; i < 4 + 12 * Math.random(); i++) {
                System.err.print(
                    "\r" + ROTATING_CHAR.charAt(i % ROTATING_CHAR.length()) + " Connecting.. \r");
                wait(500);
            }
            BookingOption2CarbonCareConverter converter = new BookingOption2CarbonCareConverter();
            CarbonCareRequestApi carbonCareRequestApi = converter.convertToCarbonCareRequest(bo);
            carbonCareRequestApi.getRequest().setApiKey(cmdOptions.getApiKey());

            SSLContext ctx = createSSLContext();
            Client client = ClientBuilder.newBuilder().sslContext(ctx).build();
            String targetPrefix = cmdOptions.getCarbonCareURLPrefix() + ":" + cmdOptions.getCarbonCareServerPort();
            WebTarget target = client.target(targetPrefix + "/xml/calc");
            Invocation.Builder inv = target.request(javax.ws.rs.core.MediaType.APPLICATION_XML);
            Response post =
                inv.post(Entity.entity(carbonCareRequestApi, MediaType.APPLICATION_XML));
            CarbonCareResponseApi responseApi = post.readEntity(CarbonCareResponseApi.class);
            List<Shipment> shipment = responseApi.getResponse().getShipments().getShipment();
            Set<Piece> containedPieces = bo.getShipmentDetails().getContainedPieces();
            List<CompensationCosts> compensationCostsList = new ArrayList<>();
            List<Emmissions> emmissionsList = new ArrayList<>();
            ArrayList<Piece> pieces = new ArrayList<>(containedPieces);
            collectEmmissionsAndCompensation(shipment, compensationCostsList, emmissionsList, pieces);
            Map<TransportMovement, CarbonCareCo2Emmissions> carbonCareResult =
                CarbonCareAPICall.calculateCO2(emmissionsList, compensationCostsList, bo);
            enhanceBookingOption(bo, carbonCareResult);
            CarbonCareCo2Emmissions co2total = new CarbonCareCo2Emmissions();
            carbonCareResult.entrySet().iterator().forEachRemaining(es -> {
                System.err.printf(
                    "                %s CO2e: %.1fkg, Compensation %s %.2f\n",
                    bookingOptionFlightToString(es.getKey()),
                    es.getValue().co2e_ttw,
                    es.getValue().currency,
                    es.getValue().compensationCosts);
                co2total.addValues(es.getValue());
            });
            System.err.println(String.format(
                "Connection #%02d: Total CO2e: %.1fkg, Compensation %s %,.2f",
                counter,
                co2total.co2e_ttw,
                co2total.currency,
                co2total.compensationCosts));
            wait(500);

            System.err.println(String.format("BookingOptions carbonated."));
            wait(1000);
            System.err.println("Writing CO2 enhanced MCD BookingOptions..");
            String json = OneRecordDomainUtil.buildJSON(allBO);
            OutputStreamWriter osw = new FileWriter(outputSource);
            osw.write(json);
            osw.close();
            wait(2000);
            System.err.println("Done writing enhanced BookingOptions to " + outputSource);

            System.err.println(String.format(""));
            System.err.println(
                String.format("Recalculated 'green' product costs with compensation"));
        }
    }

    private static void collectEmmissionsAndCompensation(List<Shipment> shipment,
        List<CompensationCosts> compensationCostsList, List<Emmissions> emmissionsList,
        ArrayList<Piece> pieces)
    {
        int count = pieces.get(0).getTransportMovements().size();
        for (int i = 0; i < count; i++) {
            Shipment s = shipment.get(i);
            Emmissions emmissions = s.getEmmissions();
            CompensationCosts compensationCosts = s.getCompensationCosts();
            emmissionsList.add(emmissions);
            compensationCostsList.add(compensationCosts);
        }
    }

    private SSLContext createSSLContext()
        throws CertificateException, KeyStoreException, IOException, NoSuchAlgorithmException,
        KeyManagementException
    {
        InputStream fis = getClass().getClassLoader().getResourceAsStream("cc-api.cer");
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        Certificate cert = cf.generateCertificate(fis);


        HttpsURLConnection.setDefaultHostnameVerifier(
            (hostname, sslSession) -> {
                String fqdn = cmdOptions.getCarbonCareURLPrefix()
                    .replaceAll("https://", "")
                    .replaceAll("http://", "");
                if (hostname.equals(fqdn)) {
                    return true;
                }
                return false;
            });
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        TrustManagerFactory tmf =
            TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        keyStore.setCertificateEntry("cc-api", cert);
        tmf.init(keyStore);
        SSLContext ctx = SSLContext.getInstance("TLS");
        ctx.init(null, tmf.getTrustManagers(), null);
        return ctx;
    }

    private void enhanceBookingOption(BookingOption bo, Map<TransportMovement, CarbonCareCo2Emmissions> map) {
        transportMovements(bo).iterator().forEachRemaining(transportSegment -> {
            CarbonCareCo2Emmissions pojo = map.get(transportSegment);
            transportSegment.setCo2Emissions(pojo.convertToOneRecord());
        });
    }

    public static final Set<TransportMovement> transportMovements(BookingOption bo) {
        Piece mainPiece = (Piece) bo.getShipmentDetails().getContainedPieces().toArray()[0];
        return mainPiece.getTransportMovements();
    }

    private String bookingOptionFlightsToString(BookingOption bo) {
        return transportMovements(bo).stream()
            .sorted(new TransportMovementSequentiator())
            .map(ts -> bookingOptionFlightToString(ts))
            .collect(Collectors.joining(" + "))
            ;
    }

    private String bookingOptionFlightToString(TransportMovement ts) {
        return String.format("%s,%s->%s(%s)",
                ts.getTransportIdentifier(),
                ts.getDepartureLocation().getCode(),
                ts.getArrivalLocation().getCode(),
                ts.getTransportMeans().getVehicleModel()
        );
    }

    private static void wait(int millis) {
        try {
            Thread.sleep(
                (int) (speedFactor * millis)
            );
        } catch (InterruptedException e) {
            // nop
        }
    }

}
